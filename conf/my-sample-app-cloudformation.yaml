Resources:

  MySampleAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AccountRecoverySetting: 
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes: 
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: false
      Schema: 
        - Name: name
          Required: true
      UsernameAttributes:
        - email
      UsernameConfiguration: 
        CaseSensitive: false
      UserPoolName: my-sample-app

  MySampleAppUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: my-sample-app
      UserPoolId: !Ref MySampleAppUserPool

  MySampleAppUserPoolClientDev:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      AllowedOAuthFlows: 
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - email
        - openid
        - profile
      CallbackURLs: 
        - http://localhost:5000/?auth-redirect
      ClientName: my-sample-app-dev
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
      LogoutURLs: 
        - http://localhost:5000/?logoff-redirec
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref MySampleAppUserPool

  MySampleAppUserPoolClientProd:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      AllowedOAuthFlows: 
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - email
        - openid
        - profile
      CallbackURLs: 
        - https://my-github-account.github.io/my-sample-app/?auth-redirect
      ClientName: my-sample-app-dev
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
      LogoutURLs: 
        - https://my-github-account.github.io/my-sample-app/?logoff-redirec
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref MySampleAppUserPool

  MySampleAppIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowClassicFlow: false
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref MySampleAppUserPoolClientDev
          ProviderName: !GetAtt MySampleAppUserPool.ProviderName
          ServerSideTokenCheck: false
      IdentityPoolName: my-sample-app

  MySampleAppIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties: 
      IdentityPoolId: !Ref MySampleAppIdentityPool
      Roles:
        "authenticated": !GetAtt MySampleAppAuthRole.Arn
        "unauthenticated": !GetAtt MySampleAppUnauthRole.Arn

  MySampleAppAuthRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref MySampleAppIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "authenticated"
      Policies:
        - PolicyName: Cognito_my-sample-appAuth_Role_inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: '*'
      RoleName: Cognito_my-sample-appAuth_Role

  MySampleAppUnauthRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref MySampleAppIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"
      Policies:
        - PolicyName: Cognito_my-sample-appUnauth_Role_inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: '*'
      RoleName: Cognito_my-sample-appUnauth_Role


Outputs:

  UserPoolId:
    Value: !GetAtt MySampleAppUserPool.ProviderName
    Export:
      Name: USER-POOL-ID

  UserPoolDomain:
    Value: !Ref MySampleAppUserPoolDomain
    Export:
      Name: USER-POOL-DOMAIN

  UserPoolAppClientIdDev:
    Value: !Ref MySampleAppUserPoolClientDev
    Export:
      Name: USER-POOL-APP-CLIENT-ID-DEV

  UserPoolAppClientIdProd:
    Value: !Ref MySampleAppUserPoolClientProd
    Export:
      Name: USER-POOL-APP-CLIENT-ID-PROD

  IdentityPoolId:
    Value: !Ref MySampleAppIdentityPool
    Export:
      Name: IDENTITY-POOL-ID
